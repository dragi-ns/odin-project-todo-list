(()=>{"use strict";function t(t){return t[0].toUpperCase()+t.slice(1).toLowerCase()}function e(t,e,n=!1){return n?(e.replaceChild(t,e.lastElementChild),t):e.appendChild(t)}function n({tagName:t="div",attributes:n={},content:r=null,useInnerHTML:a=!1,children:i=[],events:o=[]}){const s=document.createElement(t);for(const t in n)s.setAttribute(t,n[t]);r&&(a?s.innerHTML=r:s.textContent=r);for(const t of i)e(t,s);for(const t of o)s.addEventListener(t.name,t.handler);return s}function r({btnText:t=null,btnAttributes:e=null,iconAttributes:r=null,events:a=[],showOnlyIcon:i=!1}){const o=[];var s;return s=r,0!==Object.keys(s).length&&o.push(n({tagName:"span",attributes:r})),o.push(n({tagName:"span",attributes:{class:i?"sr-only":""},content:t})),n({tagName:"button",attributes:e,children:o,events:a})}function a(t,e){return{name:t,handler:e}}function i(t,e){if(e.length<t)throw new TypeError(t+" argument"+(t>1?"s":"")+" required, but only "+e.length+" present")}function o(t){return i(1,arguments),t instanceof Date||"object"==typeof t&&"[object Date]"===Object.prototype.toString.call(t)}function s(t){i(1,arguments);var e=Object.prototype.toString.call(t);return t instanceof Date||"object"==typeof t&&"[object Date]"===e?new Date(t.getTime()):"number"==typeof t||"[object Number]"===e?new Date(t):("string"!=typeof t&&"[object String]"!==e||"undefined"==typeof console||(console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://git.io/fjule"),console.warn((new Error).stack)),new Date(NaN))}function c(t){if(i(1,arguments),!o(t)&&"number"!=typeof t)return!1;var e=s(t);return!isNaN(Number(e))}var u={lessThanXSeconds:{one:"less than a second",other:"less than {{count}} seconds"},xSeconds:{one:"1 second",other:"{{count}} seconds"},halfAMinute:"half a minute",lessThanXMinutes:{one:"less than a minute",other:"less than {{count}} minutes"},xMinutes:{one:"1 minute",other:"{{count}} minutes"},aboutXHours:{one:"about 1 hour",other:"about {{count}} hours"},xHours:{one:"1 hour",other:"{{count}} hours"},xDays:{one:"1 day",other:"{{count}} days"},aboutXWeeks:{one:"about 1 week",other:"about {{count}} weeks"},xWeeks:{one:"1 week",other:"{{count}} weeks"},aboutXMonths:{one:"about 1 month",other:"about {{count}} months"},xMonths:{one:"1 month",other:"{{count}} months"},aboutXYears:{one:"about 1 year",other:"about {{count}} years"},xYears:{one:"1 year",other:"{{count}} years"},overXYears:{one:"over 1 year",other:"over {{count}} years"},almostXYears:{one:"almost 1 year",other:"almost {{count}} years"}};function d(t){return function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=e.width?String(e.width):t.defaultWidth,r=t.formats[n]||t.formats[t.defaultWidth];return r}}var l,m={date:d({formats:{full:"EEEE, MMMM do, y",long:"MMMM do, y",medium:"MMM d, y",short:"MM/dd/yyyy"},defaultWidth:"full"}),time:d({formats:{full:"h:mm:ss a zzzz",long:"h:mm:ss a z",medium:"h:mm:ss a",short:"h:mm a"},defaultWidth:"full"}),dateTime:d({formats:{full:"{{date}} 'at' {{time}}",long:"{{date}} 'at' {{time}}",medium:"{{date}}, {{time}}",short:"{{date}}, {{time}}"},defaultWidth:"full"})},h={lastWeek:"'last' eeee 'at' p",yesterday:"'yesterday at' p",today:"'today at' p",tomorrow:"'tomorrow at' p",nextWeek:"eeee 'at' p",other:"P"};function f(t){return function(e,n){var r,a=n||{};if("formatting"===(a.context?String(a.context):"standalone")&&t.formattingValues){var i=t.defaultFormattingWidth||t.defaultWidth,o=a.width?String(a.width):i;r=t.formattingValues[o]||t.formattingValues[i]}else{var s=t.defaultWidth,c=a.width?String(a.width):t.defaultWidth;r=t.values[c]||t.values[s]}return r[t.argumentCallback?t.argumentCallback(e):e]}}function g(t){return function(e){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},r=n.width,a=r&&t.matchPatterns[r]||t.matchPatterns[t.defaultMatchWidth],i=e.match(a);if(!i)return null;var o,s=i[0],c=r&&t.parsePatterns[r]||t.parsePatterns[t.defaultParseWidth],u=Array.isArray(c)?p(c,(function(t){return t.test(s)})):b(c,(function(t){return t.test(s)}));o=t.valueCallback?t.valueCallback(u):u,o=n.valueCallback?n.valueCallback(o):o;var d=e.slice(s.length);return{value:o,rest:d}}}function b(t,e){for(var n in t)if(t.hasOwnProperty(n)&&e(t[n]))return n}function p(t,e){for(var n=0;n<t.length;n++)if(e(t[n]))return n}const v={code:"en-US",formatDistance:function(t,e,n){var r,a=u[t];return r="string"==typeof a?a:1===e?a.one:a.other.replace("{{count}}",e.toString()),null!=n&&n.addSuffix?n.comparison&&n.comparison>0?"in "+r:r+" ago":r},formatLong:m,formatRelative:function(t,e,n,r){return h[t]},localize:{ordinalNumber:function(t,e){var n=Number(t),r=n%100;if(r>20||r<10)switch(r%10){case 1:return n+"st";case 2:return n+"nd";case 3:return n+"rd"}return n+"th"},era:f({values:{narrow:["B","A"],abbreviated:["BC","AD"],wide:["Before Christ","Anno Domini"]},defaultWidth:"wide"}),quarter:f({values:{narrow:["1","2","3","4"],abbreviated:["Q1","Q2","Q3","Q4"],wide:["1st quarter","2nd quarter","3rd quarter","4th quarter"]},defaultWidth:"wide",argumentCallback:function(t){return t-1}}),month:f({values:{narrow:["J","F","M","A","M","J","J","A","S","O","N","D"],abbreviated:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],wide:["January","February","March","April","May","June","July","August","September","October","November","December"]},defaultWidth:"wide"}),day:f({values:{narrow:["S","M","T","W","T","F","S"],short:["Su","Mo","Tu","We","Th","Fr","Sa"],abbreviated:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],wide:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]},defaultWidth:"wide"}),dayPeriod:f({values:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"}},defaultWidth:"wide",formattingValues:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"}},defaultFormattingWidth:"wide"})},match:{ordinalNumber:(l={matchPattern:/^(\d+)(th|st|nd|rd)?/i,parsePattern:/\d+/i,valueCallback:function(t){return parseInt(t,10)}},function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=t.match(l.matchPattern);if(!n)return null;var r=n[0],a=t.match(l.parsePattern);if(!a)return null;var i=l.valueCallback?l.valueCallback(a[0]):a[0];i=e.valueCallback?e.valueCallback(i):i;var o=t.slice(r.length);return{value:i,rest:o}}),era:g({matchPatterns:{narrow:/^(b|a)/i,abbreviated:/^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,wide:/^(before christ|before common era|anno domini|common era)/i},defaultMatchWidth:"wide",parsePatterns:{any:[/^b/i,/^(a|c)/i]},defaultParseWidth:"any"}),quarter:g({matchPatterns:{narrow:/^[1234]/i,abbreviated:/^q[1234]/i,wide:/^[1234](th|st|nd|rd)? quarter/i},defaultMatchWidth:"wide",parsePatterns:{any:[/1/i,/2/i,/3/i,/4/i]},defaultParseWidth:"any",valueCallback:function(t){return t+1}}),month:g({matchPatterns:{narrow:/^[jfmasond]/i,abbreviated:/^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,wide:/^(january|february|march|april|may|june|july|august|september|october|november|december)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^j/i,/^f/i,/^m/i,/^a/i,/^m/i,/^j/i,/^j/i,/^a/i,/^s/i,/^o/i,/^n/i,/^d/i],any:[/^ja/i,/^f/i,/^mar/i,/^ap/i,/^may/i,/^jun/i,/^jul/i,/^au/i,/^s/i,/^o/i,/^n/i,/^d/i]},defaultParseWidth:"any"}),day:g({matchPatterns:{narrow:/^[smtwf]/i,short:/^(su|mo|tu|we|th|fr|sa)/i,abbreviated:/^(sun|mon|tue|wed|thu|fri|sat)/i,wide:/^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^s/i,/^m/i,/^t/i,/^w/i,/^t/i,/^f/i,/^s/i],any:[/^su/i,/^m/i,/^tu/i,/^w/i,/^th/i,/^f/i,/^sa/i]},defaultParseWidth:"any"}),dayPeriod:g({matchPatterns:{narrow:/^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,any:/^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i},defaultMatchWidth:"any",parsePatterns:{any:{am:/^a/i,pm:/^p/i,midnight:/^mi/i,noon:/^no/i,morning:/morning/i,afternoon:/afternoon/i,evening:/evening/i,night:/night/i}},defaultParseWidth:"any"})},options:{weekStartsOn:0,firstWeekContainsDate:1}};function y(t){if(null===t||!0===t||!1===t)return NaN;var e=Number(t);return isNaN(e)?e:e<0?Math.ceil(e):Math.floor(e)}function w(t,e){i(2,arguments);var n=s(t).getTime(),r=y(e);return new Date(n+r)}function k(t,e){i(2,arguments);var n=y(e);return w(t,-n)}var T=864e5;function j(t){i(1,arguments);var e=1,n=s(t),r=n.getUTCDay(),a=(r<e?7:0)+r-e;return n.setUTCDate(n.getUTCDate()-a),n.setUTCHours(0,0,0,0),n}function C(t){i(1,arguments);var e=s(t),n=e.getUTCFullYear(),r=new Date(0);r.setUTCFullYear(n+1,0,4),r.setUTCHours(0,0,0,0);var a=j(r),o=new Date(0);o.setUTCFullYear(n,0,4),o.setUTCHours(0,0,0,0);var c=j(o);return e.getTime()>=a.getTime()?n+1:e.getTime()>=c.getTime()?n:n-1}function x(t){i(1,arguments);var e=C(t),n=new Date(0);n.setUTCFullYear(e,0,4),n.setUTCHours(0,0,0,0);var r=j(n);return r}var P=6048e5;function M(t,e){i(1,arguments);var n=e||{},r=n.locale,a=r&&r.options&&r.options.weekStartsOn,o=null==a?0:y(a),c=null==n.weekStartsOn?o:y(n.weekStartsOn);if(!(c>=0&&c<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");var u=s(t),d=u.getUTCDay(),l=(d<c?7:0)+d-c;return u.setUTCDate(u.getUTCDate()-l),u.setUTCHours(0,0,0,0),u}function D(t,e){i(1,arguments);var n=s(t),r=n.getUTCFullYear(),a=e||{},o=a.locale,c=o&&o.options&&o.options.firstWeekContainsDate,u=null==c?1:y(c),d=null==a.firstWeekContainsDate?u:y(a.firstWeekContainsDate);if(!(d>=1&&d<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var l=new Date(0);l.setUTCFullYear(r+1,0,d),l.setUTCHours(0,0,0,0);var m=M(l,e),h=new Date(0);h.setUTCFullYear(r,0,d),h.setUTCHours(0,0,0,0);var f=M(h,e);return n.getTime()>=m.getTime()?r+1:n.getTime()>=f.getTime()?r:r-1}function N(t,e){i(1,arguments);var n=e||{},r=n.locale,a=r&&r.options&&r.options.firstWeekContainsDate,o=null==a?1:y(a),s=null==n.firstWeekContainsDate?o:y(n.firstWeekContainsDate),c=D(t,e),u=new Date(0);u.setUTCFullYear(c,0,s),u.setUTCHours(0,0,0,0);var d=M(u,e);return d}var S=6048e5;function A(t,e){for(var n=t<0?"-":"",r=Math.abs(t).toString();r.length<e;)r="0"+r;return n+r}const U=function(t,e){var n=t.getUTCFullYear(),r=n>0?n:1-n;return A("yy"===e?r%100:r,e.length)},q=function(t,e){var n=t.getUTCMonth();return"M"===e?String(n+1):A(n+1,2)},E=function(t,e){return A(t.getUTCDate(),e.length)},O=function(t,e){return A(t.getUTCHours()%12||12,e.length)},W=function(t,e){return A(t.getUTCHours(),e.length)},L=function(t,e){return A(t.getUTCMinutes(),e.length)},Y=function(t,e){return A(t.getUTCSeconds(),e.length)},H=function(t,e){var n=e.length,r=t.getUTCMilliseconds();return A(Math.floor(r*Math.pow(10,n-3)),e.length)};function F(t,e){var n=t>0?"-":"+",r=Math.abs(t),a=Math.floor(r/60),i=r%60;if(0===i)return n+String(a);var o=e||"";return n+String(a)+o+A(i,2)}function I(t,e){return t%60==0?(t>0?"-":"+")+A(Math.abs(t)/60,2):B(t,e)}function B(t,e){var n=e||"",r=t>0?"-":"+",a=Math.abs(t);return r+A(Math.floor(a/60),2)+n+A(a%60,2)}const z={G:function(t,e,n){var r=t.getUTCFullYear()>0?1:0;switch(e){case"G":case"GG":case"GGG":return n.era(r,{width:"abbreviated"});case"GGGGG":return n.era(r,{width:"narrow"});default:return n.era(r,{width:"wide"})}},y:function(t,e,n){if("yo"===e){var r=t.getUTCFullYear(),a=r>0?r:1-r;return n.ordinalNumber(a,{unit:"year"})}return U(t,e)},Y:function(t,e,n,r){var a=D(t,r),i=a>0?a:1-a;return"YY"===e?A(i%100,2):"Yo"===e?n.ordinalNumber(i,{unit:"year"}):A(i,e.length)},R:function(t,e){return A(C(t),e.length)},u:function(t,e){return A(t.getUTCFullYear(),e.length)},Q:function(t,e,n){var r=Math.ceil((t.getUTCMonth()+1)/3);switch(e){case"Q":return String(r);case"QQ":return A(r,2);case"Qo":return n.ordinalNumber(r,{unit:"quarter"});case"QQQ":return n.quarter(r,{width:"abbreviated",context:"formatting"});case"QQQQQ":return n.quarter(r,{width:"narrow",context:"formatting"});default:return n.quarter(r,{width:"wide",context:"formatting"})}},q:function(t,e,n){var r=Math.ceil((t.getUTCMonth()+1)/3);switch(e){case"q":return String(r);case"qq":return A(r,2);case"qo":return n.ordinalNumber(r,{unit:"quarter"});case"qqq":return n.quarter(r,{width:"abbreviated",context:"standalone"});case"qqqqq":return n.quarter(r,{width:"narrow",context:"standalone"});default:return n.quarter(r,{width:"wide",context:"standalone"})}},M:function(t,e,n){var r=t.getUTCMonth();switch(e){case"M":case"MM":return q(t,e);case"Mo":return n.ordinalNumber(r+1,{unit:"month"});case"MMM":return n.month(r,{width:"abbreviated",context:"formatting"});case"MMMMM":return n.month(r,{width:"narrow",context:"formatting"});default:return n.month(r,{width:"wide",context:"formatting"})}},L:function(t,e,n){var r=t.getUTCMonth();switch(e){case"L":return String(r+1);case"LL":return A(r+1,2);case"Lo":return n.ordinalNumber(r+1,{unit:"month"});case"LLL":return n.month(r,{width:"abbreviated",context:"standalone"});case"LLLLL":return n.month(r,{width:"narrow",context:"standalone"});default:return n.month(r,{width:"wide",context:"standalone"})}},w:function(t,e,n,r){var a=function(t,e){i(1,arguments);var n=s(t),r=M(n,e).getTime()-N(n,e).getTime();return Math.round(r/S)+1}(t,r);return"wo"===e?n.ordinalNumber(a,{unit:"week"}):A(a,e.length)},I:function(t,e,n){var r=function(t){i(1,arguments);var e=s(t),n=j(e).getTime()-x(e).getTime();return Math.round(n/P)+1}(t);return"Io"===e?n.ordinalNumber(r,{unit:"week"}):A(r,e.length)},d:function(t,e,n){return"do"===e?n.ordinalNumber(t.getUTCDate(),{unit:"date"}):E(t,e)},D:function(t,e,n){var r=function(t){i(1,arguments);var e=s(t),n=e.getTime();e.setUTCMonth(0,1),e.setUTCHours(0,0,0,0);var r=e.getTime(),a=n-r;return Math.floor(a/T)+1}(t);return"Do"===e?n.ordinalNumber(r,{unit:"dayOfYear"}):A(r,e.length)},E:function(t,e,n){var r=t.getUTCDay();switch(e){case"E":case"EE":case"EEE":return n.day(r,{width:"abbreviated",context:"formatting"});case"EEEEE":return n.day(r,{width:"narrow",context:"formatting"});case"EEEEEE":return n.day(r,{width:"short",context:"formatting"});default:return n.day(r,{width:"wide",context:"formatting"})}},e:function(t,e,n,r){var a=t.getUTCDay(),i=(a-r.weekStartsOn+8)%7||7;switch(e){case"e":return String(i);case"ee":return A(i,2);case"eo":return n.ordinalNumber(i,{unit:"day"});case"eee":return n.day(a,{width:"abbreviated",context:"formatting"});case"eeeee":return n.day(a,{width:"narrow",context:"formatting"});case"eeeeee":return n.day(a,{width:"short",context:"formatting"});default:return n.day(a,{width:"wide",context:"formatting"})}},c:function(t,e,n,r){var a=t.getUTCDay(),i=(a-r.weekStartsOn+8)%7||7;switch(e){case"c":return String(i);case"cc":return A(i,e.length);case"co":return n.ordinalNumber(i,{unit:"day"});case"ccc":return n.day(a,{width:"abbreviated",context:"standalone"});case"ccccc":return n.day(a,{width:"narrow",context:"standalone"});case"cccccc":return n.day(a,{width:"short",context:"standalone"});default:return n.day(a,{width:"wide",context:"standalone"})}},i:function(t,e,n){var r=t.getUTCDay(),a=0===r?7:r;switch(e){case"i":return String(a);case"ii":return A(a,e.length);case"io":return n.ordinalNumber(a,{unit:"day"});case"iii":return n.day(r,{width:"abbreviated",context:"formatting"});case"iiiii":return n.day(r,{width:"narrow",context:"formatting"});case"iiiiii":return n.day(r,{width:"short",context:"formatting"});default:return n.day(r,{width:"wide",context:"formatting"})}},a:function(t,e,n){var r=t.getUTCHours()/12>=1?"pm":"am";switch(e){case"a":case"aa":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"aaa":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"}).toLowerCase();case"aaaaa":return n.dayPeriod(r,{width:"narrow",context:"formatting"});default:return n.dayPeriod(r,{width:"wide",context:"formatting"})}},b:function(t,e,n){var r,a=t.getUTCHours();switch(r=12===a?"noon":0===a?"midnight":a/12>=1?"pm":"am",e){case"b":case"bb":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"bbb":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"}).toLowerCase();case"bbbbb":return n.dayPeriod(r,{width:"narrow",context:"formatting"});default:return n.dayPeriod(r,{width:"wide",context:"formatting"})}},B:function(t,e,n){var r,a=t.getUTCHours();switch(r=a>=17?"evening":a>=12?"afternoon":a>=4?"morning":"night",e){case"B":case"BB":case"BBB":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"BBBBB":return n.dayPeriod(r,{width:"narrow",context:"formatting"});default:return n.dayPeriod(r,{width:"wide",context:"formatting"})}},h:function(t,e,n){if("ho"===e){var r=t.getUTCHours()%12;return 0===r&&(r=12),n.ordinalNumber(r,{unit:"hour"})}return O(t,e)},H:function(t,e,n){return"Ho"===e?n.ordinalNumber(t.getUTCHours(),{unit:"hour"}):W(t,e)},K:function(t,e,n){var r=t.getUTCHours()%12;return"Ko"===e?n.ordinalNumber(r,{unit:"hour"}):A(r,e.length)},k:function(t,e,n){var r=t.getUTCHours();return 0===r&&(r=24),"ko"===e?n.ordinalNumber(r,{unit:"hour"}):A(r,e.length)},m:function(t,e,n){return"mo"===e?n.ordinalNumber(t.getUTCMinutes(),{unit:"minute"}):L(t,e)},s:function(t,e,n){return"so"===e?n.ordinalNumber(t.getUTCSeconds(),{unit:"second"}):Y(t,e)},S:function(t,e){return H(t,e)},X:function(t,e,n,r){var a=(r._originalDate||t).getTimezoneOffset();if(0===a)return"Z";switch(e){case"X":return I(a);case"XXXX":case"XX":return B(a);default:return B(a,":")}},x:function(t,e,n,r){var a=(r._originalDate||t).getTimezoneOffset();switch(e){case"x":return I(a);case"xxxx":case"xx":return B(a);default:return B(a,":")}},O:function(t,e,n,r){var a=(r._originalDate||t).getTimezoneOffset();switch(e){case"O":case"OO":case"OOO":return"GMT"+F(a,":");default:return"GMT"+B(a,":")}},z:function(t,e,n,r){var a=(r._originalDate||t).getTimezoneOffset();switch(e){case"z":case"zz":case"zzz":return"GMT"+F(a,":");default:return"GMT"+B(a,":")}},t:function(t,e,n,r){var a=r._originalDate||t;return A(Math.floor(a.getTime()/1e3),e.length)},T:function(t,e,n,r){return A((r._originalDate||t).getTime(),e.length)}};function $(t,e){switch(t){case"P":return e.date({width:"short"});case"PP":return e.date({width:"medium"});case"PPP":return e.date({width:"long"});default:return e.date({width:"full"})}}function R(t,e){switch(t){case"p":return e.time({width:"short"});case"pp":return e.time({width:"medium"});case"ppp":return e.time({width:"long"});default:return e.time({width:"full"})}}var G={p:R,P:function(t,e){var n,r=t.match(/(P+)(p+)?/)||[],a=r[1],i=r[2];if(!i)return $(t,e);switch(a){case"P":n=e.dateTime({width:"short"});break;case"PP":n=e.dateTime({width:"medium"});break;case"PPP":n=e.dateTime({width:"long"});break;default:n=e.dateTime({width:"full"})}return n.replace("{{date}}",$(a,e)).replace("{{time}}",R(i,e))}};const Q=G;function X(t){var e=new Date(Date.UTC(t.getFullYear(),t.getMonth(),t.getDate(),t.getHours(),t.getMinutes(),t.getSeconds(),t.getMilliseconds()));return e.setUTCFullYear(t.getFullYear()),t.getTime()-e.getTime()}var J=["D","DD"],V=["YY","YYYY"];function _(t){return-1!==J.indexOf(t)}function K(t){return-1!==V.indexOf(t)}function Z(t,e,n){if("YYYY"===t)throw new RangeError("Use `yyyy` instead of `YYYY` (in `".concat(e,"`) for formatting years to the input `").concat(n,"`; see: https://git.io/fxCyr"));if("YY"===t)throw new RangeError("Use `yy` instead of `YY` (in `".concat(e,"`) for formatting years to the input `").concat(n,"`; see: https://git.io/fxCyr"));if("D"===t)throw new RangeError("Use `d` instead of `D` (in `".concat(e,"`) for formatting days of the month to the input `").concat(n,"`; see: https://git.io/fxCyr"));if("DD"===t)throw new RangeError("Use `dd` instead of `DD` (in `".concat(e,"`) for formatting days of the month to the input `").concat(n,"`; see: https://git.io/fxCyr"))}var tt,et=/[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g,nt=/P+p+|P+|p+|''|'(''|[^'])+('|$)|./g,rt=/^'([^]*?)'?$/,at=/''/g,it=/[a-zA-Z]/;function ot(t,e,n){i(2,arguments);var r=String(e),a=n||{},o=a.locale||v,u=o.options&&o.options.firstWeekContainsDate,d=null==u?1:y(u),l=null==a.firstWeekContainsDate?d:y(a.firstWeekContainsDate);if(!(l>=1&&l<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var m=o.options&&o.options.weekStartsOn,h=null==m?0:y(m),f=null==a.weekStartsOn?h:y(a.weekStartsOn);if(!(f>=0&&f<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");if(!o.localize)throw new RangeError("locale must contain localize property");if(!o.formatLong)throw new RangeError("locale must contain formatLong property");var g=s(t);if(!c(g))throw new RangeError("Invalid time value");var b=X(g),p=k(g,b),w={firstWeekContainsDate:l,weekStartsOn:f,locale:o,_originalDate:g},T=r.match(nt).map((function(t){var e=t[0];return"p"===e||"P"===e?(0,Q[e])(t,o.formatLong,w):t})).join("").match(et).map((function(n){if("''"===n)return"'";var r=n[0];if("'"===r)return st(n);var i=z[r];if(i)return!a.useAdditionalWeekYearTokens&&K(n)&&Z(n,e,t),!a.useAdditionalDayOfYearTokens&&_(n)&&Z(n,e,t),i(p,n,o.localize,w);if(r.match(it))throw new RangeError("Format string contains an unescaped latin alphabet character `"+r+"`");return n})).join("");return T}function st(t){return t.match(rt)[1].replace(at,"'")}function ct(t){return n(Object.assign(t,{children:[ut(t)],events:[a("click",(t=>{const e=t.target;e.classList.contains("modal")&&mt(e)})),a("keydown",(t=>{"Escape"===t.key&&mt(t.currentTarget)})),a("animationend",(t=>{const e=t.currentTarget;e.classList.contains("inactive")&&e.remove()}))]}))}function ut({title:t="Modal",cardBodyChildren:e=[],cardFooterChildren:i=[]}){const o=[r({btnText:"Close Modal",btnAttributes:{class:"btn btn--square btn--medium btn--borderless modal-close-button"},iconAttributes:{class:"mdi mdi-close"},showOnlyIcon:!0,events:[a("click",(t=>{mt(t.currentTarget.closest(".modal"))}))]}),dt(t)];return Array.isArray(e)&&0!==e.length&&o.push(function(t){return n({attributes:{class:"modal-card-body"},children:t})}(e)),Array.isArray(i)&&0!==i.length&&o.push(function(t){return n({tagName:"footer",attributes:{class:"modal-card-footer"},children:t})}(i)),n({tagName:"article",attributes:{class:"modal-card"},children:o})}function dt(t){return n({tagName:"header",attributes:{class:"modal-card-header"},content:t})}function lt(t){document.documentElement.classList.add("clipped"),t.classList.remove("inactive"),t.classList.add("active");const e=t.querySelector("form");e&&e.elements[0].focus()}function mt(t){document.documentElement.classList.remove("clipped"),t.classList.remove("active"),t.classList.add("inactive")}function ht(t){let e=!0;for(const n of t.elements)"submit"!==n.type&&(n.validity.valid?gt(n):(ft(n),e=!1));return e}function ft(e){const n=e.previousElementSibling.textContent,r=e.nextElementSibling;let a=null;a=e.validity.valueMissing?"is required":e.validity.tooLong?`should have maximum ${e.maxLength} characters; you entered ${e.value.length}`:e.validity.rangeOverflow?`should be less than or equal to ${e.max}; you entered ${e.value}`:"is invalid",r.textContent=`${t(n)} ${a}!`}function gt(t){"submit"!==t.type&&(t.nextElementSibling.textContent="")}var bt=new Uint8Array(16);function pt(){if(!tt&&!(tt="undefined"!=typeof crypto&&crypto.getRandomValues&&crypto.getRandomValues.bind(crypto)||"undefined"!=typeof msCrypto&&"function"==typeof msCrypto.getRandomValues&&msCrypto.getRandomValues.bind(msCrypto)))throw new Error("crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported");return tt(bt)}const vt=/^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i,yt=function(t){return"string"==typeof t&&vt.test(t)};for(var wt=[],kt=0;kt<256;++kt)wt.push((kt+256).toString(16).substr(1));const Tt=function(t,e,n){var r=(t=t||{}).random||(t.rng||pt)();if(r[6]=15&r[6]|64,r[8]=63&r[8]|128,e){n=n||0;for(var a=0;a<16;++a)e[n+a]=r[a];return e}return function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,n=(wt[t[e+0]]+wt[t[e+1]]+wt[t[e+2]]+wt[t[e+3]]+"-"+wt[t[e+4]]+wt[t[e+5]]+"-"+wt[t[e+6]]+wt[t[e+7]]+"-"+wt[t[e+8]]+wt[t[e+9]]+"-"+wt[t[e+10]]+wt[t[e+11]]+wt[t[e+12]]+wt[t[e+13]]+wt[t[e+14]]+wt[t[e+15]]).toLowerCase();if(!yt(n))throw TypeError("Stringified UUID is invalid");return n}(r)};class jt{#t;static Priority=Object.freeze({NORMAL:"normal",LOW:"low",MEDIUM:"medium",HIGH:"high"});constructor(t,e,n,r,a=!1){this.#t=Tt(),this.title=t,this.description=e,this.dueDate=n,this.dueDate.setHours(0,0,0,0),this.priority=r,this.completed=a,this.project=null}get id(){return this.#t}toggleCompleted(){this.completed=!this.completed}}const Ct=jt;function xt(t,e){i(2,arguments);var n=s(t),r=s(e);return n.getTime()===r.getTime()}const Pt=class{#t;#e=[];constructor(t,e=[],n=!1,r=!1,a=!1){this.#t=Tt(),this.name=t,this.active=n,this.perserve=r,this.dummy=a,this.addTasks(e)}get id(){return this.#t}getTask(t){return this.#e.find((e=>e.id===t))}getTasks(){return this.#e.slice(0)}addTask(t,e=!0){return this.getTask(t.id)||(this.#e.push(t),e&&(t.project=this)),t}addTasks(t,e=!0){return t.forEach((t=>this.addTask(t,e))),t}removeTask(t){this.#e=this.#e.filter((e=>e.id!==t.id)),t.project=null}};class Mt{static#n={default:{title:"General",items:[new Pt("Inbox",[],!0,!0,!1),new Pt("Today",[],!1,!0,!0),new Pt("Upcoming",[],!1,!0,!0)]},userProjects:{title:"Projects",items:[]}};static getProjectById(t){for(const e in this.#n){const n=this.#n[e].items.find((e=>e.id===t));if(n)return n}}static getDefaultProject(){return this.#n.default.items.find((t=>t.perserve&&!t.dummy))}static getActiveProject(){for(const t in this.#n)for(const e of this.#n[t].items)if(e.active)return e}static getSections(){return Object.assign({},this.#n)}static getProjects(){return Object.keys(this.#n).reduce(((t,e)=>t.concat(this.#n[e].items.filter((t=>!t.dummy)))),[])}static addProject(t){return this.getProjectById(t.id)||this.#n.userProjects.items.push(t),t}static addProjects(t){return t.forEach(this.addProject,this),t}static removeProject(t){return this.#n.userProjects.items=this.#n.userProjects.items.filter((e=>e.id===t.id)),t}static getTask(t){for(const e in this.#n)for(const n of this.#n[e].items){const e=n.getTask(t);if(e)return e}}static getTasks(){return Object.keys(this.#n).reduce(((t,e)=>{const n=this.#n[e].items.filter((t=>!t.dummy));return t.concat(...n.map((t=>t.getTasks())))}),[])}static getTodaysTasks(){const t=new Date;return t.setHours(0,0,0,0),this.getTasks().filter((e=>xt(e.dueDate,t)))}static getUpcomingTasks(){const t=new Date;return t.setHours(0,0,0,0),this.getTasks().filter((e=>xt(e.dueDate,t)||function(t,e){i(2,arguments);var n=s(t),r=s(e);return n.getTime()>r.getTime()}(e.dueDate,t)))}static addTask(t,e){const n=this.getProjectById(t)??this.getDefaultProject();return n.addTask(e),n}static addTasks(t,e){return(this.getProjectById(t)??this.getDefaultProject()).addTasks(e),e}}const Dt=Mt;function Nt(t){return n({tagName:"article",attributes:{class:"task","data-task-id":t.id,"data-task-priority":t.priority},children:[St(t),qt(t)]})}function St(t){return n({tagName:"header",attributes:{class:"task-header"},children:[At(t.completed),Ut(t),n({attributes:{class:"task-actions"},children:[r({btnText:"Edit Task",btnAttributes:{class:"btn btn--square btn--medium edit-task-modal-open"},iconAttributes:{class:"mdi mdi-square-edit-outline"},showOnlyIcon:!0,events:[a("click",(t=>{const n=Wt(Dt.getTask(t.currentTarget.closest(".task").dataset.taskId));e(n,document.body),lt(n)}))]}),r({btnText:"Delete Task",btnAttributes:{class:"btn btn--square btn--medium delete-task-modal-open"},iconAttributes:{class:"mdi mdi-delete"},showOnlyIcon:!0,events:[a("click",(t=>{const i=function(t){return ct({attributes:{id:"task-confirmation-modal",class:"modal"},title:"Confirmation",cardBodyChildren:[n({tagName:"p",content:`Are you sure you want to delete "${t.title}" task?`})],cardFooterChildren:[r({btnText:"Cancel",btnAttributes:{class:"btn"},iconAttributes:{class:"mdi mdi-close"},events:[a("click",(t=>{mt(t.currentTarget.closest(".modal"))}))]}),r({btnText:"Delete",btnAttributes:{class:"btn btn--primary",type:"submit",form:"project-form"},iconAttributes:{class:"mdi mdi-delete"},events:[a("click",(r=>{t.project.removeTask(t);const a=document.querySelector("#project .tasks"),i=a.querySelector(`[data-task-id="${t.id}"]`);a.removeChild(i),0===a.children.length&&e(n({tagName:"p",content:"There are no tasks!"}),a),mt(r.currentTarget.closest(".modal"))}))]})]})}(Dt.getTask(t.currentTarget.closest(".task").dataset.taskId));e(i,document.body),lt(i)}))]})]})]})}function At(t){const e={type:"checkbox",class:"task-complete-toggle"};return t&&(e.checked="checked"),n({tagName:"input",attributes:e,events:[a("change",(t=>{const e=t.currentTarget.closest(".task");Dt.getTask(e.dataset.taskId).toggleCompleted()}))]})}function Ut(t){return n({attributes:{class:"task-summary"},children:[(r=t.title,n({tagName:"h2",attributes:{class:"task-title"},content:r})),(e=t.dueDate,n({tagName:"p",attributes:{class:"task-due-date"},content:ot(e,"dd/MM/yyyy")}))],events:[a("click",(t=>{t.currentTarget.closest(".task").classList.toggle("expanded")}))]});var e,r}function qt(e){return n({attributes:{class:"task-details"},children:[(a=e.description,n({tagName:"p",attributes:{class:"task-description"},content:a})),(r=e.priority,n({tagName:"p",attributes:{class:"task-priority"},children:[n({tagName:"span",content:"Priority:"}),n({tagName:"span",attributes:{class:"task-priority-value"},content:t(r)})]})),Et(e.project)]});var r,a}function Et(t){return n({tagName:"p",attributes:{class:"task-project"},children:[n({tagName:"span",content:"Project:"}),n({tagName:"a",attributes:{href:"#",class:"task-project-value","data-project-id":t.id},content:t.name,events:[a("click",(t=>{Xt(Dt.getProjectById(t.currentTarget.dataset.projectId))}))]})]})}function Ot(r=null){return n({tagName:"form",attributes:{id:"task-form",class:"form",novalidate:!0},children:[n({attributes:{class:"form-field"},children:[n({tagName:"label",attributes:{for:"task-title"},content:"Task Title"}),n({tagName:"input",attributes:{type:"text",name:"task-title",id:"task-title",placeholder:"Go to the gym already buddy...",maxlength:32,required:!0,autocomplete:"off",value:r?r.title:""},events:[a("blur",(t=>{const e=t.currentTarget;e.value=e.value.trim()}))]}),n({tagName:"span",attributes:{class:"error"}})]}),n({attributes:{class:"form-field"},children:[n({tagName:"label",attributes:{for:"task-description"},content:"Task Description"}),n({tagName:"textarea",attributes:{name:"task-description",id:"task-description",placeholder:"Pick the closest gym go go go go go!",maxlength:256},content:r?r.description:"",events:[a("blur",(t=>{const e=t.currentTarget;e.value=e.value.trim()}))]}),n({tagName:"span",attributes:{class:"error"}})]}),n({attributes:{class:"form-field"},children:[n({tagName:"label",attributes:{for:"task-due-date"},content:"Task Due Date"}),n({tagName:"input",attributes:{type:"date",name:"task-due-date",id:"task-due-date",min:ot(new Date,"yyyy-MM-dd"),value:ot(r?r.dueDate:new Date,"yyyy-MM-dd"),required:!0}}),n({tagName:"span",attributes:{class:"error"}})]}),n({attributes:{class:"form-field"},children:[n({tagName:"label",attributes:{for:"task-priority"},content:"Task Priority"}),n({tagName:"select",attributes:{name:"task-priority",id:"task-priority"},children:Object.values(Ct.Priority).map(((e,a)=>{const i={value:e};return(r&&r.priority===e||null===r&&0===a)&&(i.selected=!0),n({tagName:"option",attributes:i,content:t(e)})}))}),n({tagName:"span",attributes:{class:"error"}})]}),n({attributes:{class:"form-field"},children:[n({tagName:"label",attributes:{for:"task-project"},content:"Task Project"}),n({tagName:"select",attributes:{name:"task-project",id:"task-project"},children:Dt.getProjects().map((t=>{const e={value:t.id};return(r&&r.project.id===t.id||null===r&&t.active)&&(e.selected=!0),n({tagName:"option",attributes:e,content:t.name})}))}),n({tagName:"span",attributes:{class:"error"}})]})],events:[a("submit",(t=>{t.preventDefault();const a=t.currentTarget;if(ht(a)){if(r){r.title=a.elements["task-title"].value,r.description=a.elements["task-description"].value,r.dueDate=new Date(a.elements["task-due-date"].value),r.priority=a.elements["task-priority"].value;const t=a.elements["task-project"].value,e=document.querySelector("#project .tasks"),i=e.querySelector(`[data-task-id="${r.id}"]`);if(r.project.id!==t){r.project.removeTask(r),Dt.addTask(t,r);const a=Dt.getActiveProject();r.project.id===a.id||a.dummy?e.replaceChild(Nt(r),i):(e.removeChild(i),0===e.children.length&&e.appendChild(n({tagName:"p",content:"There are no tasks!"})))}}else{const t=new Ct(a.elements["task-title"].value,a.elements["task-description"].value,new Date(a.elements["task-due-date"].value),a.elements["task-priority"].value);if(Dt.addTask(a.elements["task-project"].value,t),t.project.active){const n=document.querySelector(`#project[data-project-id="${project.id}"] .tasks`);n&&e(Nt(t),n,1===n.children.length&&"p"===n.children[0].tagName.toLowerCase())}}mt(a.closest(".modal"))}}))]})}function Wt(t=null){return ct({attributes:{id:"task-modal",class:"modal"},title:t?"Edit Task":"New Task",cardBodyChildren:[Ot(t)],cardFooterChildren:[r({btnText:"Cancel",btnAttributes:{class:"btn"},iconAttributes:{class:"mdi mdi-close"},events:[a("click",(t=>{mt(t.currentTarget.closest(".modal"))}))]}),r({btnText:t?"Save Changes":"Add Task",btnAttributes:{class:"btn btn--primary",type:"submit",form:"task-form"},iconAttributes:{class:"mdi mdi-plus"}})]})}function Lt(t){return n({tagName:"section",attributes:{id:"project",class:"project","data-project-id":t.id},children:[Yt(t),Ft(t.getTasks())]})}function Yt(t){return n({tagName:"header",attributes:{class:"project-header"},children:[(e=t.name,n({tagName:"h1",attributes:{class:"project-title"},content:e})),Ht(t.perserve,t.dummy)]});var e}function Ht(t,i){const o=[];return i||o.push(r({btnText:"New Task",btnAttributes:{class:"btn btn--square btn--medium new-task-modal-open"},iconAttributes:{class:"mdi mdi-plus-box-outline"},showOnlyIcon:!0,events:[a("click",(()=>{const t=Wt();e(t,document.body),lt(t)}))]})),t||o.push(r({btnText:"Edit Project",btnAttributes:{class:"btn btn--square btn--medium edit-project-modal-open"},iconAttributes:{class:"mdi mdi-square-edit-outline"},showOnlyIcon:!0,events:[a("click",(()=>{const t=Bt(Dt.getActiveProject());e(t,document.body),lt(t)}))]}),r({btnText:"Delete Project",btnAttributes:{class:"btn btn--square btn--medium delete-project-modal-open"},iconAttributes:{class:"mdi mdi-delete"},showOnlyIcon:!0,events:[a("click",(()=>{const t=ct({attributes:{id:"project-confirmation-modal",class:"modal"},title:"Confirmation",cardBodyChildren:[n({tagName:"p",content:`Are you sure you want to delete "${(i=Dt.getActiveProject()).name}" project and it's tasks?`})],cardFooterChildren:[r({btnText:"Cancel",btnAttributes:{class:"btn"},iconAttributes:{class:"mdi mdi-close"},events:[a("click",(t=>{mt(t.currentTarget.closest(".modal"))}))]}),r({btnText:"Delete",btnAttributes:{class:"btn btn--primary",type:"submit",form:"project-form"},iconAttributes:{class:"mdi mdi-delete"},events:[a("click",(t=>{const r=Dt.getDefaultProject();i.active=!1,document.querySelector(`#user-projects [data-project-id="${i.id}"]`).remove();const a=document.querySelector("#user-projects .navigation-section-items");0===a.children.length&&e(n({tagName:"p",content:"There are no projects!"}),a),r.active=!0,document.querySelector(`#project-navigation [data-project-id="${r.id}"]`).classList.add("active"),e(Lt(r),document.querySelector("#main"),!0),Dt.removeProject(i),mt(t.currentTarget.closest(".modal"))}))]})]});var i;e(t,document.body),lt(t)}))]})),n({attributes:{class:"project-actions"},children:o})}function Ft(t){const e=[];return 0===t.length?e.push(n({tagName:"p",content:"There are no tasks!"})):e.push(...t.map((t=>Nt(t)))),n({attributes:{class:"tasks"},children:e})}function It(t=null){return n({tagName:"form",attributes:{id:"project-form",class:"form",novalidate:!0},children:[n({attributes:{class:"form-field"},children:[n({tagName:"label",attributes:{for:"project-name"},content:"Project Name"}),n({tagName:"input",attributes:{type:"text",name:"project-name",id:"project-name",placeholder:"Work",maxlength:16,autocomplete:"off",required:!0,value:t?t.name:""},events:[a("blur",(t=>{const e=t.currentTarget;e.value=e.value.trim()}))]}),n({tagName:"span",attributes:{class:"error"}})]})],events:[a("submit",(n=>{n.preventDefault();const r=n.currentTarget;if(ht(r)){if(t){const n=r.elements["project-name"].value;if(t.name!==n){t.name=r.elements["project-name"].value;const n=document.querySelector("#user-projects .navigation-section-items"),a=document.querySelector(`#user-projects [data-project-id="${t.id}"]`),i=Qt(t);n.replaceChild(i,a),e(Lt(t),document.querySelector("#main"),!0)}}else{const t=new Pt(r.elements["project-name"].value);Dt.addProject(t);const n=document.querySelector("#user-projects .navigation-section-items");e(Qt(t),n,1===n.children.length&&"p"===n.children[0].tagName.toLowerCase())}mt(r.closest(".modal"))}}))]})}function Bt(t=null){return ct({attributes:{id:"project-modal",class:"modal"},title:t?"Edit Project":"New Project",cardBodyChildren:[It(t)],cardFooterChildren:[r({btnText:"Cancel",btnAttributes:{class:"btn"},iconAttributes:{class:"mdi mdi-close"},events:[a("click",(t=>{mt(t.currentTarget.closest(".modal"))}))]}),r({btnText:t?"Save Changes":"Add Project",btnAttributes:{class:"btn btn--primary",type:"submit",form:"project-form"},iconAttributes:{class:"mdi mdi-plus"}})]})}function zt(t){const e=n({tagName:"nav",attributes:{id:"project-navigation",class:"project-navigation","data-visible":!1},children:Object.keys(t).map((e=>function(t,e){const r={class:"navigation-section"},a="userProjects"===t;return a&&(r.id="user-projects"),n({attributes:r,children:[$t(e.title,a),Gt(e.items)]})}(e,t[e])))});return function(t){const e=document.querySelector(`[aria-controls="${t.getAttribute("id")}"]`);function n(){t.dataset.visible="false",e.setAttribute("aria-expanded",!1)}e.addEventListener("click",(()=>{"true"===t.dataset.visible?n():(t.dataset.visible="true",e.setAttribute("aria-expanded",!0))})),document.addEventListener("click",(r=>{const a=r.target;a!==e&&null===a.closest("#project-navigation")&&"true"===t.dataset.visible&&n()}))}(e),e}function $t(t,i=!1){const o=[Rt(t)];return i&&o.push(n({attributes:{class:"navigation-section-actions"},children:[r({btnText:"New Project",btnAttributes:{class:"btn btn--square btn--medium new-project-modal-open"},iconAttributes:{class:"mdi mdi-plus-box-outline"},showOnlyIcon:!0,events:[a("click",(()=>{const t=Bt();e(t,document.body),lt(t)}))]})]})),n({tagName:"header",attributes:{class:"navigation-section-header"},children:o})}function Rt(t){return n({tagName:"p",attributes:{class:"navigation-section-title uppercase"},content:t})}function Gt(t){const e=[];return 0===t.length?e.push(n({tagName:"p",content:"There are no projects!"})):e.push(...t.map((t=>Qt(t)))),n({attributes:{class:"navigation-section-items"},children:e})}function Qt(t){return n({tagName:"baddTaskutton",attributes:{class:"navigation-section-item btn"+(t.active?" active":""),"data-project-id":t.id},content:t.name,events:[a("click",(()=>{t.dummy&&("Today"===t.name?t.addTasks(Dt.getTodaysTasks(),!1):"Upcoming"===t.name&&t.addTasks(Dt.getUpcomingTasks(),!1)),Xt(t)}))]})}function Xt(t){const n=Dt.getActiveProject();if(t.id===n.id)return;const r=document.querySelector(`#project-navigation [data-project-id="${n.id}"]`);r&&r.classList.remove("active"),n.active=!1;const a=document.querySelector(`#project-navigation [data-project-id="${t.id}"]`);a&&a.classList.add("active"),t.active=!0,e(Lt(t),document.querySelector("#main"),!0)}document.addEventListener("DOMContentLoaded",(()=>{const t=document.querySelector("#main");e(zt(Dt.getSections()),t),e(Lt(Dt.getActiveProject()),t)}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,